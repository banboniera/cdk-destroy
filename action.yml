name: "Destroy CDK Stack"
description: "Destroys a CDK stack with validation and reporting"
branding:
  icon: "trash-2"
  color: "red"

inputs:
  aws-region:
    description: "Target AWS region for deployment"
    required: true
  role-to-assume:
    description: "AWS IAM role ARN to assume"
    required: true
  stack-name:
    description: "Name of the CDK stack to deploy"
    required: false
  artifact-name:
    description: "Name for the deployment artifact (default: cdk-deployment-package)"
    required: false
    default: "cdk-deployment-package"
  artifact-path:
    description: "Path to store deployment files (default: deployment)"
    required: false
    default: "deployment"
  node-version:
    description: "Node.js version (default: 22)"
    required: false
    default: "22"
  timeout-seconds:
    description: "Maximum duration (in seconds) for deployment (default: 1800)"
    required: false
    default: "1800"

runs:
  using: composite
  steps:
    - name: Download Synthesized Template
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.artifact-name }}
        path: ${{ inputs.artifact-path }}

    - name: Move Artifact
      shell: bash
      run: mv ${{ inputs.artifact-path }}/* .

    - name: Setup Node.js ${{ inputs.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.aws-region }}
        role-to-assume: ${{ inputs.role-to-assume }}

    - name: Destroy Stack
      id: destroy
      shell: bash
      run: |
        echo "status=pending" >> $GITHUB_OUTPUT

        if [ -n "${{ inputs.stack-name }}" ]; then
          DESTROY_CMD="npx cdk destroy ${{ inputs.stack-name }}"
        else
          DESTROY_CMD="npx cdk destroy --all"
        fi

        if timeout ${{ inputs.timeout-seconds }} $DESTROY_CMD \
          --force \
          --app cdk.out; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "Destruction completed successfully"
        else
          EXIT_CODE=$?
          echo "status=failure" >> $GITHUB_OUTPUT
          
          if [ $EXIT_CODE -eq 124 ]; then
            FAILURE_REASON="Destruction timed out after ${{ inputs.timeout-seconds }} seconds"
          else
            FAILURE_REASON="Destruction failed with exit code $EXIT_CODE"
          fi
          echo "failure-reason=$FAILURE_REASON" >> $GITHUB_OUTPUT
          echo "::error::$FAILURE_REASON"
          exit $EXIT_CODE
        fi

    - name: Destruction Summary
      if: always()
      shell: bash
      run: |
        echo "### 🗑️ Destruction Summary" >> $GITHUB_STEP_SUMMARY

        if [ "${{ steps.destroy.outputs.status }}" == "success" ]; then
          echo "**Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Status**: ❌ Failed" >> $GITHUB_STEP_SUMMARY
          echo "**Failure Reason**: ${{ steps.destroy.outputs.failure-reason }}" >> $GITHUB_STEP_SUMMARY
        fi
